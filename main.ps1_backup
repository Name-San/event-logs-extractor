# Function to calculate the last working day of the current month
function Get-LastWorkingDay {
    $today = Get-Date
    $lastDayOfMonth = (Get-Date -Year $today.Year -Month $today.Month -Day 1).AddMonths(1).AddDays(-1)

    # Adjust for weekends
    switch ($lastDayOfMonth.DayOfWeek) {
        'Saturday' { $lastDayOfMonth.AddDays(-1) }
        'Sunday'   { $lastDayOfMonth.AddDays(-2) }
        default    { $lastDayOfMonth }
    }
}

function Get-Records {
    if (-not(Test-Path .\reference)) {
        New-Item -ItemType Directory -Path .\reference > $null
    }

    rclone copy UPScans:_db_names .\reference

    if(-not(Test-Path .\reference\naming_ref.csv)) {
        throw "Missing reference file in cloud."
    }

    return
}

function Upload-Files {
    param($folder)
    rclone copy ".\logs" UPScans:$folder
    return
}

function Verify-FileNames {
    param([string]$user,[string]$ref,[int]$attempt)
    Write-output "$attempt"
    if ($attempt -eq 3) {
        throw "Failed to fetch naming."
    }

    if(-not(Test-Path $user)) {
        throw "Missing user profile."
    }

    if (-not(Test-Path $ref)) {
        Get-Records
    }

    # Look for device id
    Get-Content -Path  $user | ForEach-Object {
        if ($_ -match "device:\s*(.+)") {
            $device = $matches[1].Trim()
        }
    }

    # Retrieve correspondede folder and file
    Get-Content -Path $ref | ForEach-Object {
        if ($_ -imatch "$device,(.+),(.+)") {
            $folder = $matches[1].Trim()  
            $file = $matches[2].Trim()
        }
    }

    foreach ($item in @($device, $folder, $file)) {
        if (-not ($item)) {
            $attempt++
            return Verify-FileNames -user $user -ref $ref -attempt $attempt
        }
    }

    [PSCustomObject]@{
        Folder = $folder
        File   = $file
    }
   
}

# Helper function to format the log data
function Format-LogEntry {
    param ($entry)
    [PSCustomObject]@{
        Level       = $entry.LevelDisplayName
        'Date and Time' = $entry.TimeCreated
        Source         = $entry.ProviderName
        'Event ID'     = $entry.Id
        'Task Category' = $entry.TaskDisplayName
        Message       = $entry.Message  # Replace newlines for better CSV readability
    }
}

# Determine if today is the last working day
function Main {
    $lastWorkingDay = 09
    $today = 09

    if ($today -eq $lastWorkingDay) {
        
        # Ensure the output directory exists
        $env:RCLONE_CONFIG = ".\config\rclone.conf"
        $outputDir = ".\logs"
        $applicationDir = "$outputDir\Scan Logs"
        $securityDir = "$outputDir\Entry Logs"
        $ref = ".\reference\naming_ref.csv"
        $user = ".\config\user.prof"

        $result = Verify-FileNames -user $user -ref $ref -attempt 0
        $file = $result.File
        $folder = $result.Folder

        if (-not (Test-Path $outputDir)) {
            New-Item -ItemType Directory -Path $applicationDir > $null
            New-Item -ItemType Directory -Path $securityDir > $null
        }        
       
        # 1. Get Application logs for the last month
        Get-WinEvent -ErrorAction SilentlyContinue -FilterHashtable @{LogName="Application"; StartTime=(Get-Date).AddMonths(-1); EndTime=(Get-Date)} |
        ForEach-Object { Format-LogEntry $_ } |
        Export-Csv -Path "$applicationDir\$file.csv" -NoTypeInformation 

        # 2. Get Security logs with Event ID 4624 (Successful Logons)
        Get-WinEvent -ErrorAction SilentlyContinue -FilterHashtable @{LogName="Security"; Id=4624; StartTime=(Get-Date).AddMonths(-1); EndTime=(Get-Date)} |
        ForEach-Object { Format-LogEntry $_ } |
        Export-Csv -Path "$securityDir\Logons Logs.csv" -NoTypeInformation

        # 3. Get Security logs with Event ID 4625 (Failed Logins)
        Get-WinEvent -ErrorAction SilentlyContinue -FilterHashtable @{LogName="Security"; Id=4625; StartTime=(Get-Date).AddMonths(-1); EndTime=(Get-Date)} |
        ForEach-Object { Format-LogEntry $_ } |
        Export-Csv -Path "$securityDir\Failed Login Logs.csv" -NoTypeInformation
        
        # Upload logs to google drive using rclone
        Upload-Files -folder $folder

        return "Success"
    } else {
        return $false
    }
}

#Check-Rclone
cd C:\App
Main